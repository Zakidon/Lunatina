---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const galleries = await getCollection('gallery');
const images = galleries.flatMap(g => g.data.images || []).map(img => img.image);
---

<Layout title="Галерея" description="Фото и видео работ.">
  <main class="container mx-auto p-4">
    <h1 class="text-4xl font-bold mb-8">Галерея</h1>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      {galleries.flatMap(g => g.data.images || []).map(img => (
        <img
          src={img.image}
          alt={img.alt}
          class="cursor-pointer w-full h-auto gallery-img"
          data-src={img.image}
          loading="lazy"
        />
      ))}
    </div>
    <div
      id="lightbox"
      class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 md:items-center"
      style="display: none;"
      data-images={JSON.stringify(images)}
    >
      <img id="lightbox-img" class="max-w-[90vw] max-h-[90vh]" />
      <button
        id="close-btn"
        class="absolute top-4 right-4 text-white text-4xl md:text-5xl font-bold bg-black bg-opacity-50 rounded-full w-10 h-10 md:w-12 md:h-12 flex items-center justify-center hover:bg-opacity-75"
        aria-label="Закрыть лайтбокс"
      >
        &times;
      </button>
      <button
        id="prev-btn"
        class="hidden md:block absolute left-4 top-1/2 transform -translate-y-1/2 text-white text-4xl bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75"
        aria-label="Предыдущее изображение"
      >
        &lt;
      </button>
      <button
        id="next-btn"
        class="hidden md:block absolute right-4 top-1/2 transform -translate-y-1/2 text-white text-4xl bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75"
        aria-label="Следующее изображение"
      >
        &gt;
      </button>
      <div
        id="tooltip"
        class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-50 text-white p-2 rounded text-sm md:text-base"
      >
        Свайп для навигации, тап на фон для закрытия
      </div>
    </div>
    <script>
      const lightbox = document.getElementById('lightbox');
      const lightboxImg = document.getElementById('lightbox-img') as HTMLImageElement;
      const closeBtn = document.getElementById('close-btn');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const tooltip = document.getElementById('tooltip');
      const imageList = lightbox ? JSON.parse(lightbox.dataset.images || '[]') : [];
      let currentIndex = 0;

      function openLightbox(src: string) {
        if (lightbox && lightboxImg) {
          console.log('openLightbox called with src:', src);
          lightboxImg.src = src;
          currentIndex = imageList.indexOf(src);
          lightbox.style.display = 'flex';
          if (tooltip) {
            tooltip.style.display = 'block';
            setTimeout(() => {
              if (tooltip) tooltip.style.display = 'none';
            }, 3000);
          }
        } else {
          console.error('Lightbox or lightboxImg not found');
        }
      }

      function closeLightbox() {
        console.log('closeLightbox called');
        if (lightbox) {
          lightbox.style.display = 'none';
        } else {
          console.error('Lightbox not found');
        }
      }

      function showNext() {
        currentIndex = (currentIndex + 1) % imageList.length;
        if (lightboxImg) {
          lightboxImg.src = imageList[currentIndex];
        }
      }

      function showPrev() {
        currentIndex = (currentIndex - 1 + imageList.length) % imageList.length;
        if (lightboxImg) {
          lightboxImg.src = imageList[currentIndex];
        }
      }

      // Обработчики для картинок
      document.querySelectorAll('.gallery-img').forEach(img => {
        img.addEventListener('click', () => {
          const src = img.getAttribute('data-src');
          console.log('Image clicked, src:', src);
          if (src) openLightbox(src);
        });
      });

      // Обработчики для lightbox
      if (lightbox) {
        lightbox.addEventListener('click', (e) => {
          if (e.target === lightbox || e.target === lightboxImg) closeLightbox();
        });
      }

      // Обработчики для кнопок
      if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
      if (prevBtn) prevBtn.addEventListener('click', showPrev);
      if (nextBtn) nextBtn.addEventListener('click', showNext);

      // Swipe для мобильных
      let touchStartX = 0;
      lightbox?.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      lightbox?.addEventListener('touchend', (e) => {
        const touchEndX = e.changedTouches[0].screenX;
        if (touchEndX < touchStartX - 50) showNext();
        if (touchEndX > touchStartX + 50) showPrev();
      });

      // Клавиатурная навигация
      document.addEventListener('keydown', (e) => {
        if (lightbox?.style.display === 'flex') {
          if (e.key === 'Escape') closeLightbox();
          if (e.key === 'ArrowRight') showNext();
          if (e.key === 'ArrowLeft') showPrev();
        }
      });
    </script>
  </main>
</Layout>